#!/usr/bin/env php
<?php

class Bow
{
	private final function __construct() {}
	private final function __clone() {}

	/**
	 * Lance FIRE.
	 *
	 * @param array $argc
	 * @param array $argv
	 * @return int
	 */
	public static function run($argc, $argv)
	{
		$argc -= 0;
		array_shift($argv);

		if ($argc == 0) {
			$argv[0] = "help";
		}

		$status = 0;

		switch ($argv[0]) {
			case 'generate':
				if (!isset($argv[0]) || !isset($argv[1])) {
					return static::usage();
				}
				$name = "";
				if (!in_array($argv[1], ["key", "-k"])) {
					if (!isset($argv[2])) {
						return static::usage();
					}
					$name = $argv[2];
				}
				switch ($argv[1]) {
					case 'model':
					case '-m':
						static::createModel($name);
						break;
					case 'controller':
					case '-c':
						$status = static::createController($name);
						break;
					case 'middleware':
					case '-r':
						$status = static::createMiddleware($name);
						break;
					case 'key':
					case '-k':
						$status = static::generateKey();
						break;
					default:
						$status = static::usage();
						break;
				}
				break;

			case 'migrate':
					$status = 0;
					echo "\033[0;32mIn dev\033[00m\n";
				break;

			case 'help':
				$status = static::usage();
				break;

			case 'server':
				if (isset($argv[1])) {
					$port = (int) $argv[1];
				} else {
					$port = "5000";
				}
				$r = fopen("php://stdout", "r");
				if ($r) {
					fwrite($r, "Web Server start at http://localhost:$port\nCtrl-C for shutdown it\n");
				}
				shell_exec("php -S localhost:$port server.php");
				break;

			default:
				$status = static::usage();
				break;
		}

		return $status;
	}

	/**
	 * @param $middlewareName
	 * @return int
	 */
	private static function createMiddleware($middlewareName)
	{
		$middlewareName = ucfirst($middlewareName);

		if (file_exists("app/Middleware/$middlewareName.php")) {
			echo "\033[0;31mMiddleware <\033[0;33m@\033[0;31m$middlewareName\033[00m\033[0;31m> already exist.\033[00m\n";
			return 0;
		}

$middlewareTemplate = <<<CM
<?php

namespace App\Middleware;

use Bow\Database\Database;

class {$middlewareName}
{
	/**
	 * Fonction de lancement du middleware.
	 *
	 * @param mixed
	 * @return boolean
	 */
	public function handler()
	{
		// do something here
	}
}
CM;
		file_put_contents("app/Middleware/$middlewareName.php", $middlewareTemplate);
		echo "\033[0;32mMiddleware \033[00m@@{$middlewareName}\033[0;32m Created.\033[00m\n";

		return 0;
	}

	/**
	 * @param $controllerName
	 * @return int
	 */
	private static function createController($controllerName)
	{
		if (!preg_match("/controller$/i", $controllerName)) {
			$controllerName = ucfirst($controllerName) . "Controller";
		} else {
			if (preg_match("/^(.+)(controller)$/", $controllerName, $match)) {
				array_shift($match);
				$controllerName = ucfirst($match[0]) . ucfirst($match[1]);
			} else {
				$controllerName = ucfirst($controllerName);
			}
		}

		if (file_exists("app/Controller/$controllerName.php")) {
			echo "\033[0;31mController <\033[0;33m@\033[0;31m$controllerName\033[00m\033[0;31m> already exist.\033[00m\n";
			return 0;
		}

$controllerTemplate =<<<CC
<?php

namespace App\Controller;

use Exception;
use App\Controller;
use Bow\Database\Database;

class {$controllerName} extends Controller
{
	/**
	 * Start point
	 *
	 * @return mixed
	 */
   	public function index()
   	{
		// do something here.
   	}

	/**
	 * Add information
	 *
	 * @param Response \$res
	 */
   	public function add()
   	{
		// do something here.
	}

	/**
	 * get all information
	 *
	 * @return mixed
	 */
 	public function get()
   	{
		// do something here.
	}

	/**
	 * update method
	 *
	 * @return mixed
	 */
 	public function update()
   	{
		// do something here.
	}

	/**
	 * Delete data
	 *
	 * @return mixed
	 */
   	public function delete()
	{
		// do something here.
 	}
}
CC;

		file_put_contents("app/Controller/$controllerName.php", $controllerTemplate);
		echo "\033[0;32mController \033[00m@@{$controllerName}\033[0;32m have been Create.\033[00m\n";

		return 0;
	}

	/**
	 * @param $modelName
	 * @return int
	 */
	private static function createModel($modelName)
	{
		$tableName = strtolower($modelName);
		$modelName = ucfirst($modelName);

$model = <<<MODEL
<?php

namespace App\Model;

use Bow\Exception\TableException;

class ${modelName}
{
	/**
	 * Facade
	 * @param string \$method
	 * @param array \$arg
	 * @return Table
	 */
	public static function __callStatic(\$method, \$arg)
	{
		\$table = table("${tableName}");
		if (method_exists(\$table, \$method)) {
			return call_user_func_array([\$table, \$method], \$arg);
		} else {
			throw new TableException("method \$method not found", 1);
		}

		return \$table;
	}
}

MODEL;
		if (file_exists("app/Model/${modelName}.php")) {
			echo "\033[0;33mModel <\033[0;33m@\033[0;31m${modelName}\033[00m\033[0;31m> already exist.\033[00m";

            return 0;
		}

		file_put_contents("app/Model/${modelName}.php", $model);

		echo "\033[0;32mModel \033[00m@@${modelName}\033[0;32m Created.\033[00m\n";

		return 0;
	}

	/**
	 * @return int
	 */
	private static function usage()
	{

$usage = <<<USAGE

Bow usage: php bow :command :option :stdout-file-name

\033[0;31mcommand\033[00m:

 \033[0;32mgenerate\033[00m create a user class
  option:
   \033[0;33mcontroller\033[00m | \033[0;32m-c\033[00m 	for create controller
   \033[0;33mmodel\033[00m | \033[0;32m-m\033[00m		for create model
   \033[0;33mmiddleware\033[00m | \033[0;32m-r\033[00m 	for create middleware
   \033[0;33mkey\033[00m | \033[0;32m-k\033[00m		for create new app key

 \033[0;32mmigrate\033[00m create migration of user model
  option:
   \033[0;33mup\033[00m		To create migration \033[0;31m(in building)\033[00m
   \033[0;33mdown\033[00m		To drop migration \033[0;31m(in building)\033[00m
   \033[0;33mtruncate\033[00m	To truncate table \033[0;31m(in building)\033[00m


USAGE;
		echo $usage;

		return 0;
	}

	/**
	 * generate key
	 *
	 * @return integer
	 */
	private function generateKey() {
		$key = base64_encode(openssl_random_pseudo_bytes(5) . date('Y-m-d H:i:s'));
		file_put_contents("config/.key", $key);
		echo "[new app-key: \033[0;32m$key\033[00m ::length[" . strlen($key) . "]::]\n";

		return 0;
	}
}

$s = Bow::run($argc, $argv);
exit($s);
