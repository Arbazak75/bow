#!/usr/bin/env php
<?php

use Bow\Support\Resource\Storage;

class Bow
{
    private final function __construct() {}
    private final function __clone() {}

    /**
     * Lance Bow.
     *
     * @param int $argc
     * @param array $argv
     * @return int
     */
    public static function run($argc, array $argv)
    {
        $status = 0;
        $argc -= 1;

        array_shift($argv);

        if ($argc <= 0) {
            $argv[0] = "help:null";
        }

        $params = explode(":", $argv[0]);

        if (count($params) == 1) {
            list($cmd, $param) = [$params[0], null];
        } else {
            // formate cmd.
            list($cmd, $param)  = $params;
        }

        switch ($cmd) {
            case 'generate':
            case 'make'    :
                $name = null;
                if ($param !== "key") {
                    if (!isset($argv[1])) {
                        return static::usage();
                    }
                    $name = $argv[1];
                }
                switch ($param) {
                    case 'model':
                        static::createModel($name);
                        break;
                    case 'controller':
                        $status = static::createController($name);
                        break;
                    case 'resource':
                        $status = static::createController($name, true);
                        break;
                    case 'middleware':
                        $status = static::createMiddleware($name);
                        break;
                    case 'key':
                        $status = static::generateKey();
                        break;
                    default:
                        $status = static::usage();
                        break;
                }
                break;

            case 'migrate':
                $filename = null;
                if (isset($argv[1])) {
                    $filename = $argv[1];
                }

                $arg = [];

                if (isset($argv[2])) {
                    $arg = explode("=", $argv[2], 2);
                }

                switch($param) {
                    case "make":
                        static::createMigration($filename, $arg);
                        break;
                    case "up":
                        static::migrate($filename, "up", $arg);
                        break;
                    case "down":
                        static::migrate($filename, "down", $arg);
                        break;
                    default:
                        if (isset($argv[1])) {
                            $arg = explode("=", $argv[1], 2);
                        }
                        static::migrate(null, null, $arg);
                        break;
                }

                break;

            case 'help':
                $status = static::usage();
                break;

            case 'server':
                if (isset($argv[1])) {
                    $port = (int) $argv[1];
                } else {
                    $port = "5000";
                }
                // resource.
                $r = fopen("php://stdout", "w");
                if ($r) {
                    fwrite($r, "Web Server start at http://localhost:$port\nCtrl-C for shutdown it\n");
                }
                fclose($r);
                // lancement du serveur.
                shell_exec("php -S localhost:$port server.php");
                break;

            default:
                $status = static::usage();
                break;
        }

        return $status;
    }

    /**
     * @param string $filename
     * @param array $arg
     */
    private static function createMigration($filename, $arg = [])
    {
        $mapMethod = ["create", "drop"];

        if (count($arg) == 2) {
            $table = $arg[1];
            if ($arg[0] == "--table") {
                $mapMethod = ["table", "table"];
            }
            if ($arg[0] == "--create") {
                $mapMethod = ["create", "drop"];
            }
        } else {
            $table = $filename;
        }

        $className = ucfirst($table);
        $migrate = <<<doc
<?php
use \Bow\Database\Migration\Fields;
use \Bow\Database\Migration\Schema;
use \Bow\Database\Migration\Migration;

class Create{$className}Table extends Migration
{
    /**
     * Liste of column to fill
     */
    protected static \$marks = [
        // "integer"   => "integer:2",
        // "name"      => "string:59",
        // "date_up"   => "date:now",
        // "timestamp" => "time"
    ];

    public static \$table = "$table";

    /**
     * create {$table} table
     *
     * @param bool \$fill
     */
    public function up(\$fill = false)
    {
        Schema::{$mapMethod[0]}(static::\$table, function(Fields \$table) {
            \$table->increment("id");
            \$table->timestamps("create_at");
        });
    }

    /**
     * drop a table {$table}
     */
    public function down()
    {
        Schema::{$mapMethod[1]}(static::\$table);
    }
}
doc;
        if (preg_match("/^[a-z]+$/", $filename)) {
            $filename = "create_{$filename}_table";
        }

        $createAt = date("Y_m_d") . "_" . date("His");
        $file = __DIR__. "/migration/" . $createAt . "_${filename}.php";

        file_put_contents($file, $migrate);

        Storage::append(__DIR__. "/migration/.registers", "{$createAt}_{$filename}|$table\n");

        echo "\033[0;32mMigration file for $filename created.\033[00m\n";
    }

    /**
     * @param string $table le nom de table
     * @param string $type le type de migration up|down
     * @param string $arg le type de migration up|down
     * @return int
     * @throws ErrorException
     */
    private static function migrate($table = null, $type = null, $arg = null)
    {
        if ($table) {
            $fileParten = __DIR__.strtolower("/migration/*{$table}*.php");
        } else {
            $fileParten = __DIR__.strtolower("/migration/*.php");
        }

        if ($type == null) {
            $type = "up";
        }

        $register = ["file" => [], "tables" => []];

        foreach(file(__DIR__."/migration/.registers") as $r) {
            $tmp = explode("|", $r);
            $register["file"][] = $tmp[0];
            $register["tables"][] = $tmp[1];
        }

        foreach(glob($fileParten) as $file) {
            if (file_exists($file)) {
                $filename = preg_replace("@^(" . __DIR__."/migration/)|(\.php)$@", "", $file);

                if (in_array($filename, $register["file"])) {
                    $num = array_flip($register["file"])[$filename];
                    $table = rtrim($register["tables"][$num]);
                }

                require $file;

                $class = "Create".ucfirst($table)."Table";
                $instance = new $class;
                call_user_func([$instance, strtolower("$type")]);
                if (isset($arg[0]) && $arg[0] == "--seed") {
                    $n = 1;
                    if (isset($arg[1])) {
                        $n = $arg[1];
                    }
                    call_user_func_array([$instance, 'fill'], [$n]);
                    echo "\033[0;33m$n\033[00m \033[0;32mseed for $table.\033[00m\n";
                }
            } else {
                throw new ErrorException("$file n'existe pas.", E_USER_ERROR);
            }
        }


        return 0;
    }
    /**
     * @param $middlewareName
     * @return int
     */
    private static function createMiddleware($middlewareName)
    {
        $middlewareName = ucfirst($middlewareName);

        if (file_exists(__DIR__ . "/app/Middleware/$middlewareName.php")) {
            echo "\033[0;31mMiddleware <\033[0;33m@\033[0;31m$middlewareName\033[00m\033[0;31m> already exist.\033[00m\n";
            return 0;
        }

        $middlewareTemplate = <<<CM
<?php
namespace App\Middleware;

use Bow\Database\Database;

class {$middlewareName}
{
	/**
	 * Fonction de lancement du middleware.
	 *
	 * @param mixed
	 * @return boolean
	 */
	public function handle()
	{
		// do something here
		return true;
	}
}
CM;
        file_put_contents(__DIR__."/app/Middleware/$middlewareName.php", $middlewareTemplate);
        echo "\033[0;32mMiddleware \033[00m@@{$middlewareName}\033[0;32m Created.\033[00m\n";

        return 0;
    }

    /**
     * @param string $controllerName
     * @param bool $rest
     * @return int
     */
    private static function createController($controllerName, $rest = false)
    {
        if (!preg_match("/controller$/i", $controllerName)) {
            $controllerName = ucfirst($controllerName) . "Controller";
        } else {
            if (preg_match("/^(.+)(controller)$/", $controllerName, $match)) {
                array_shift($match);
                $controllerName = ucfirst($match[0]) . ucfirst($match[1]);
            } else {
                $controllerName = ucfirst($controllerName);
            }
        }

        $path = preg_replace("/controller/", "", strtolower($controllerName));

        if (file_exists("app/Controller/$controllerName.php")) {
            echo "\033[0;31mController <\033[0;33m@\033[0;31m$controllerName\033[00m\033[0;31m> already exist.\033[00m\n";
            return 0;
        }

        $controllerTemplate =<<<CC
<?php
namespace App\Controller;

use Exception;
use App\Controller;
use Bow\Database\Database;

class {$controllerName} extends Controller
{
    /**
	 * Créer une nouvelle instance du controller
	 */
	public function __construct()
	{
		\$this->middleware("test");
	}

	/**
	 * Point d'entré
	 *
	 * @param mixed \$id [optional] L'identifiant de l'element à récupérer
	 * @return mixed
	 */
   	public function index(\$id = null)
   	{
		// do something here.
   	}

	/**
	 * Afficher la vue permettant de create une resource.
	 */
   	public function create()
   	{
		// do something here.
	}

	/**
	 * Ajouter une nouvelle resource dans la base d'information
	 */
   	public function store()
   	{
		// do something here.
	}

	/**
	 * Récupérer un information précise avec un identifiant.
	 *
	 * @param mixed \$id [optional] L'identifiant de l'élément à récupérer
	 * @return mixed
	 */
 	public function show(\$id = null)
   	{
		// do something here.
	}

	/**
	 * Mise à jour d'un resource en utilisant paramètre du GET
	 *
	 * @param mixed \$id L'identifiant de l'élément à mettre à jour
	 * @return mixed
	 */
 	public function edit(\$id)
   	{
		// do something here.
	}

	/**
	 * Mise à jour d'une resource
	 *
	 * @param mixed \$id L'identifiant de l'élément à mettre à jour
	 * @return mixed
	 */
 	public function update(\$id)
   	{
		// do something here.
	}

	/**
	 * Supprimer une resource
	 *
	 * @param mixed \$id L'identifiant de l'élément à supprimer
	 * @return mixed
	 */
   	public function destroy(\$id)
	{
		// do something here.
 	}
}
CC;
        if ($rest) {
            $model = ucfirst($path);

            $res = static::readline("Voulez vous que je crée les vues associés?");

            if ($res) {
                $model = strtolower($model);
                @mkdir("app/Views/".$model, 0766);
                foreach(["create", "edit", "show", "index", "update", "delete"] as $value) {
                    $file = __DIR__ . "/app/Views/$model/$value.twig";
                    file_put_contents($file, "");
                    echo "$file\n";
                }
            }

            $res = static::readline("Voulez vous que je crée un model?");

            if ($res) {
                static::createModel($model);
                $model = "\nuse App\\$model;";
            } else {
                $model = "";
            }
            $controllerRestTemplate =<<<CC
<?php
namespace App\Controller;

use Exception;
use App\Controller;$model
use Bow\Database\Database;

class {$controllerName} extends Controller
{
    /**
	 * Créer une nouvelle instance du controller
	 */
	public function __construct()
	{
		\$this->middleware("test");
	}

	/**
	 * Point d'entré
	 * GET /$path
	 *
	 * @param mixed \$id [optional] L'identifiant de l'element à récupérer
	 * @return mixed
	 */
   	public function index(\$id = null)
   	{
		// do something here.
   	}

	/**
	 * Afficher la vue permettant de create une resource.
	 * GET /$path/create
	 */
   	public function create()
   	{
		// do something here.
	}

	/**
	 * Ajouter une nouvelle resource dans la base d'information
	 * POST /{$path}
	 */
   	public function store()
   	{
		// do something here.
	}

	/**
	 * Récupérer un information précise avec un identifiant.
	 * GET /$path/:id
	 *
	 * @param mixed \$id [optional] L'identifiant de l'élément à récupérer
	 * @return mixed
	 */
 	public function show(\$id = null)
   	{
		// do something here.
	}

	/**
	 * Mise à jour d'un resource en utilisant paramètre du GET
	 * GET /$path/:id/edit
	 *
	 * @param mixed \$id L'identifiant de l'élément à mettre à jour
	 * @return mixed
	 */
 	public function edit(\$id)
   	{
		// do something here.
	}

	/**
	 * Mise à jour d'une resource
	 * PUT /$path/:id
	 *
	 * @param mixed \$id L'identifiant de l'élément à mettre à jour
	 * @return mixed
	 */
 	public function update(\$id)
   	{
		// do something here.
	}

	/**
	 * Supprimer une resource
	 * DELETE /$path/:id
	 *
	 * @param mixed \$id L'identifiant de l'élément à supprimer
	 * @return mixed
	 */
   	public function destroy(\$id)
	{
		// do something here.
 	}
}
CC;
            file_put_contents("app/Controller/${controllerName}.php", $controllerRestTemplate);

        } else {
            file_put_contents("app/Controller/${controllerName}.php", $controllerTemplate);
        }

        echo "\033[0;32mController \033[00m@@{$controllerName}\033[0;32m have been Create.\033[00m\n";

        return 0;
    }

    /**
     * @param $modelName
     * @return int
     */
    private static function createModel($modelName)
    {
        $tableName = strtolower($modelName);
        $modelName = ucfirst($modelName);

        $model = <<<MODEL
<?php
namespace App;

use Bow\Database\Model;

class ${modelName} extends Model
{
	/**
	 * Ajoutez les champs à valider ici
	 */
	public static \$rules = [
	    // inserer ici vos contrainte sur les champs
	    // provenant d'un réquête
	];

	/**
	 * Le nom de la table.
	 *
	 * @var string
	 */
	public static \$table = "$tableName";
}

MODEL;
        if (file_exists("app/${modelName}.php")) {
            echo "\033[0;33mModel <\033[0;33m@\033[0;31m${modelName}\033[00m\033[0;31m> already exist.\033[00m\n";

            return 0;
        }

        file_put_contents("app/${modelName}.php", $model);

        echo "\033[0;32mModel \033[00m@@${modelName}\033[0;32m Created.\033[00m\n";

        return 0;
    }

    /**
     * @param string $message
     * @return string
     */
    private static function readline($message)
    {
        $input = readline("\033[0;32m$message Y/N\033[00m >>> ");

        if (strtolower($input) == "y") {
            return true;
        }

        return false;
    }

    /**
     * @return int
     */
    private static function usage()
    {

        $usage = <<<USAGE

Bow usage: php vap :command :option :stdout-file-name

\033[0;31mcommand\033[00m:

 \033[0;32mmake|generate\033[00m create a user class
  option:
   \033[0;33mgenerate:resource\033[00m	for create controller
   \033[0;33mgenerate:key\033[00m 	for create new app key
   \033[0;33mmake:controller\033[00m [--with-model]	for create controller
   \033[0;33mmake:model\033[00m 	for create model
   \033[0;33mmake:middleware\033[00m  for create middleware
   \033[0;33make:migration\033[00m		To create migration

 \033[0;32mmigrate\033[00m apply a migration in user model
  option:
   \033[0;33mmigrate:up\033[00m		Update || create table of the migration
   \033[0;33mmigrate:down\033[00m		To drop migration

USAGE;
        echo $usage;

        return 0;
    }

    /**
     * generate key
     *
     * @return integer
     */
    private function generateKey()
    {

        $key = base64_encode(openssl_random_pseudo_bytes(5) . date('Y-m-d H:i:s'));
        file_put_contents("config/.key", $key);

        echo "Application Key => \033[0;32m$key\033[00m\n";

        return 0;
    }
}

try {
    require __DIR__."/vendor/autoload.php";
    Bow::run($argc, $argv);
} catch (Exception $e) {
    echo "\033[0;31m" . $e->getMessage() . "\033[00m\n";
}
